/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var neonlightGramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,7],$V2=[1,14],$V3=[1,23],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,24],$V8=[1,27],$V9=[6,17],$Va=[1,38],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,39],$Vg=[1,48],$Vh=[1,51],$Vi=[1,52],$Vj=[1,54],$Vk=[11,27,28,31],$Vl=[2,16],$Vm=[11,21,27,28,31],$Vn=[2,14],$Vo=[1,74],$Vp=[1,75],$Vq=[1,76],$Vr=[1,77],$Vs=[1,88],$Vt=[17,35],$Vu=[17,35,41,43,45,46,48,49,50,51,53,54,55,56,57],$Vv=[2,44],$Vw=[17,35,38,41,43,45,46,48,49,50,51,53,54,55,56,57],$Vx=[17,35,41],$Vy=[1,91],$Vz=[17,35,41,43],$VA=[1,92],$VB=[1,93],$VC=[17,35,41,43,45,46],$VD=[1,94],$VE=[1,95],$VF=[1,96],$VG=[1,97],$VH=[17,35,41,43,45,46,48,49,50,51],$VI=[1,98],$VJ=[1,99],$VK=[17,35,41,43,45,46,48,49,50,51,53,54],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[11,21,27,28,30,31,33];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"pgm":3,"PROGRAM":4,"ID":5,"SCOLON":6,"varDeclaration":7,"mainFunction":8,"functionDeclaration":9,"EOF":10,"VAR":11,"COLON":12,"type_specifier":13,"FUNCTION":14,"MAIN":15,"(":16,")":17,"functionType_specifier":18,"LBRACKET":19,"compoundStatement":20,"RBRACKET":21,"functionParameters":22,"localVarDeclaration":23,"statementList":24,"statement":25,"initialConditionalStatement":26,"expressionStatement":27,"loopStatement":28,"conditionalStatement":29,"ELSE":30,"IF":31,"expression":32,"ELIF":33,"assignmentExpression":34,"COMA":35,"conditionalExpression":36,"unaryExpression":37,"ASSIGN":38,"orExpression":39,"andExpression":40,"OROP":41,"equalExpression":42,"ANDOP":43,"relationalExpression":44,"EQUALOP":45,"NOTEQUALOP":46,"arithmethicExpression":47,"GTOP":48,"LTOP":49,"GTEQUALOP":50,"LTEQUALOP":51,"multiplicationExpression":52,"+":53,"-":54,"*":55,"/":56,"%":57,"NUMBER":58,"DECIMAL":59,"STRING":60,"VOID":61,"INT":62,"FLOAT":63,"CHAR":64,"BOOL":65,"$accept":0,"$end":1},
terminals_: {2:"error",4:"PROGRAM",5:"ID",6:"SCOLON",10:"EOF",11:"VAR",12:"COLON",14:"FUNCTION",15:"MAIN",16:"(",17:")",19:"LBRACKET",21:"RBRACKET",27:"expressionStatement",28:"loopStatement",30:"ELSE",31:"IF",33:"ELIF",35:"COMA",38:"ASSIGN",41:"OROP",43:"ANDOP",45:"EQUALOP",46:"NOTEQUALOP",48:"GTOP",49:"LTOP",50:"GTEQUALOP",51:"LTEQUALOP",53:"+",54:"-",55:"*",56:"/",57:"%",58:"NUMBER",59:"DECIMAL",60:"STRING",61:"VOID",62:"INT",63:"FLOAT",64:"CHAR",65:"BOOL"},
productions_: [0,[3,3],[3,5],[3,6],[3,2],[7,5],[7,6],[8,9],[9,10],[22,3],[22,5],[20,1],[20,1],[20,2],[24,1],[24,2],[25,1],[25,1],[25,1],[25,1],[26,1],[26,5],[29,7],[29,8],[32,1],[32,3],[34,1],[34,3],[36,1],[39,1],[39,3],[40,1],[40,3],[42,1],[42,3],[42,3],[44,1],[44,3],[44,3],[44,3],[44,3],[47,1],[47,3],[47,3],[52,1],[52,3],[52,3],[52,3],[37,1],[37,1],[37,1],[37,1],[23,5],[23,6],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[13,1],[13,1],[13,1],[13,1],[13,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 4:
 typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
          directorioFunciones.printData();
          return $$[$0-1]; 
break;
case 5:
 tabla.insert({varName: $$[$0-3], type: $$[$0-1]})  
break;
case 6:
 tabla.insert({varName: $$[$0-4], type: $$[$0-2]}) 
break;
case 7:

    tablaProcessing = $$[$0-7];
    directorioFunciones.insert({name: $$[$0-7], parameters: '', type: $$[$0-3], localVariables: tablaLocal, globalVariables: tabla});

break;
case 52:
 
    tablaLocal.insert({varName: $$[$0-3], type: $$[$0-1]});
    
break;
}
},
table: [{3:1,4:[1,2]},{1:[3],10:[1,3]},{5:[1,4]},o($V0,[2,4]),{6:[1,5]},o($V0,[2,1],{7:6,11:$V1}),{8:8,9:9,14:$V0},{5:[1,11]},o($V0,[2,2]),{8:12,14:[1,13]},{5:[1,15],15:$V2},{12:[1,16]},o($V0,[2,3]),{15:$V2},{16:[1,17]},{16:[1,18]},{13:19,60:$V3,62:$V4,63:$V5,64:$V6,65:$V7},{17:[1,25]},{5:$V8,22:26},{6:[1,28]},o($V9,[2,60]),o($V9,[2,61]),o($V9,[2,62]),o($V9,[2,63]),o($V9,[2,64]),{12:[1,29]},{17:[1,30]},{12:[1,31]},o([14,21,27,28,31],[2,5],{7:32,11:$V1}),{18:33,60:$Va,61:$Vb,62:$Vc,63:$Vd,64:$Ve,65:$Vf},{12:[1,40]},{13:41,60:$V3,62:$V4,63:$V5,64:$V6,65:$V7},o([11,14,21,27,28,31],[2,6]),{19:[1,42]},{19:[2,54]},{19:[2,55]},{19:[2,56]},{19:[2,57]},{19:[2,58]},{19:[2,59]},{18:43,60:$Va,61:$Vb,62:$Vc,63:$Vd,64:$Ve,65:$Vf},{6:[1,44],17:[2,9]},{11:$Vg,20:45,23:46,24:47,25:49,26:50,27:$Vh,28:$Vi,29:53,31:$Vj},{19:[1,55]},{5:$V8,22:56},o($Vk,$Vl,{21:[1,57]}),{11:$Vg,20:59,21:[2,11],23:46,24:58,25:49,26:50,27:$Vh,28:$Vi,29:53,31:$Vj},{11:$Vg,20:59,21:[2,12],23:46,24:47,25:60,26:50,27:$Vh,28:$Vi,29:53,31:$Vj},{5:[1,61]},o($Vm,$Vn),o($Vm,[2,17]),o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,20],{30:[1,62],33:[1,63]}),{16:[1,64]},{11:$Vg,20:65,23:46,24:47,25:49,26:50,27:$Vh,28:$Vi,29:53,31:$Vj},{17:[2,10]},o($V0,[2,7]),{11:$Vg,20:59,21:[2,13],23:46,24:47,25:60,26:50,27:$Vh,28:$Vi,29:53,31:$Vj},o($Vm,$Vl),o($Vm,[2,15]),{12:[1,66]},{19:[1,67]},{16:[1,68]},{5:$Vo,32:69,34:70,36:71,37:72,39:73,40:78,42:79,44:80,47:81,52:82,58:$Vp,59:$Vq,60:$Vr},o($Vk,$Vl,{21:[1,83]}),{13:84,60:$V3,62:$V4,63:$V5,64:$V6,65:$V7},{11:$Vg,20:59,23:46,24:47,25:85,26:50,27:$Vh,28:$Vi,29:53,31:$Vj},{5:$Vo,32:86,34:70,36:71,37:72,39:73,40:78,42:79,44:80,47:81,52:82,58:$Vp,59:$Vq,60:$Vr},{17:[1,87],35:$Vs},o($Vt,[2,24]),o($Vt,[2,26]),o($Vu,$Vv,{38:[1,89]}),o($Vt,[2,28],{41:[1,90]}),o($Vw,[2,48]),o($Vw,[2,49]),o($Vw,[2,50]),o($Vw,[2,51]),o($Vx,[2,29],{43:$Vy}),o($Vz,[2,31],{45:$VA,46:$VB}),o($VC,[2,33],{48:$VD,49:$VE,50:$VF,51:$VG}),o($VH,[2,36],{53:$VI,54:$VJ}),o($VK,[2,41],{55:$VL,56:$VM,57:$VN}),{14:[2,8]},{6:[1,103]},o($Vk,$Vn,{21:[1,104]}),{17:[1,105],35:$Vs},{19:[1,106]},{5:$Vo,34:107,36:71,37:72,39:73,40:78,42:79,44:80,47:81,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,34:108,36:71,37:72,39:73,40:78,42:79,44:80,47:81,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,40:109,42:79,44:80,47:81,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,42:111,44:80,47:81,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,44:112,47:81,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,44:113,47:81,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,47:114,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,47:115,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,47:116,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,47:117,52:82,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,52:118,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:110,52:119,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:120,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:121,58:$Vp,59:$Vq,60:$Vr},{5:$Vo,37:122,58:$Vp,59:$Vq,60:$Vr},o([21,27,28,31],[2,52],{7:123,11:$V1}),o($Vm,[2,21]),{19:[1,124]},{11:$Vg,20:59,23:46,24:47,25:125,26:50,27:$Vh,28:$Vi,29:53,31:$Vj},o($Vt,[2,25]),o($Vt,[2,27]),o($Vx,[2,30],{43:$Vy}),o($Vu,$Vv),o($Vz,[2,32],{45:$VA,46:$VB}),o($VC,[2,34],{48:$VD,49:$VE,50:$VF,51:$VG}),o($VC,[2,35],{48:$VD,49:$VE,50:$VF,51:$VG}),o($VH,[2,37],{53:$VI,54:$VJ}),o($VH,[2,38],{53:$VI,54:$VJ}),o($VH,[2,39],{53:$VI,54:$VJ}),o($VH,[2,40],{53:$VI,54:$VJ}),o($VK,[2,42],{55:$VL,56:$VM,57:$VN}),o($VK,[2,43],{55:$VL,56:$VM,57:$VN}),o($Vu,[2,45]),o($Vu,[2,46]),o($Vu,[2,47]),o($Vm,[2,53]),{11:$Vg,20:59,23:46,24:47,25:126,26:50,27:$Vh,28:$Vi,29:53,31:$Vj},o($Vk,$Vn,{21:[1,127]}),o($Vk,$Vn,{21:[1,128]}),o($VO,[2,22]),o($VO,[2,23])],
defaultActions: {34:[2,54],35:[2,55],36:[2,56],37:[2,57],38:[2,58],39:[2,59],56:[2,10],83:[2,8]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    var tablaVariables = /** @class */ (function () {
        function tablaVariables() {
            this.tabla = new Object();
        }
        tablaVariables.prototype.insert = function (variable) {
            if (this.tabla.hasOwnProperty(variable.varName)) {
                var element = this.tabla[variable.varName];
                element.value = variable.value;
                this.tabla[variable.varName] = element;
            }
            else {
                this.tabla[variable.varName] = variable;
            }
        };
        tablaVariables.prototype.printData = function () {
            for (var key in this.tabla) {
                if (this.tabla.hasOwnProperty(key)) {
                    console.log(this.tabla[key]);
                }
            }
        };
        return tablaVariables;
    }());
    var directorioProcedimientos = /** @class */ (function () {
        function directorioProcedimientos() {
            this.tabla = new Object;
        }
        directorioProcedimientos.prototype.insert = function (fn) {
            if (this.tabla.hasOwnProperty(fn.name)) {
                throw new Error("Redeclaracion de funcion");
            }
            else {
                this.tabla[fn.name] = fn;
            }
        };
        directorioProcedimientos.prototype.getFn = function (name) {
            return this.tabla[name];
        };
        directorioProcedimientos.prototype.printData = function () {
            for (var key in this.tabla) {
                if (this.tabla.hasOwnProperty(key)) {
                    console.log("Funcion: ", this.tabla[key]);
                }
            }
        };
        return directorioProcedimientos;
    }());
    var directorioFunciones = new directorioProcedimientos();
    var tabla = new tablaVariables();
    var tablaLocal = new tablaVariables();
    var tablaProcessing = '';
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 4
break;
case 2:return 14
break;
case 3:return 'RETURN'
break;
case 4:return 31
break;
case 5:return 33
break;
case 6:return 30
break;
case 7:return 'LOOP'
break;
case 8:return 15
break;
case 9:return 'VECTOR'
break;
case 10:return 11
break;
case 11:return 61
break;
case 12:return 62
break;
case 13:return 63
break;
case 14:return 64
break;
case 15:return 60
break;
case 16:return 65
break;
case 17:return 6
break;
case 18:return 12
break;
case 19:return 35
break;
case 20:return 5
break;
case 21:return 59
break;
case 22:return 58
break;
case 23:return 38
break;
case 24:return 55
break;
case 25:return 56
break;
case 26:return 54
break;
case 27:return 53
break;
case 28:return '^'
break;
case 29:return '!'
break;
case 30:return 57
break;
case 31:return 48
break;
case 32:return 49
break;
case 33:return 45
break;
case 34:return 46
break;
case 35:return 50
break;
case 36:return 51
break;
case 37:return 43
break;
case 38:return 41
break;
case 39:return 16
break;
case 40:return 17
break;
case 41:return 19
break;
case 42:return 21
break;
case 43:return 'PI'
break;
case 44:return 'E'
break;
case 45:return 60
break;
case 46:return 10
break;
case 47:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:Program\b)/i,/^(?:fn\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:elif\b)/i,/^(?:else\b)/i,/^(?:for\b)/i,/^(?:main\b)/i,/^(?:var\[\])/i,/^(?:var\b)/i,/^(?:void\b)/i,/^(?:int\b)/i,/^(?:float\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:=)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:PI\b)/i,/^(?:E\b)/i,/^(?:"(\\.|[^"\\])*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = neonlightGramatica;
exports.Parser = neonlightGramatica.Parser;
exports.parse = function () { return neonlightGramatica.parse.apply(neonlightGramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}